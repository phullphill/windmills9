import { registerIgnorableActions } from './createStore';

/**
 * Helper to create a standard redux action
 * @param	{string} type - name of the action
 * @param	{object} payload - payload for the action
 * @param	{object} meta - any additional information needed for the action (ie. if we need the action to debounce)
 * @return {object} redux action
 */
export function createAction(type, payload = {}, meta = {}) {
	return { type, payload, meta };
}

/**
 * Helper to create various actions for the api calls.
 * The result is a structure having request, success and failure properties
 * each of which holds a function which returns an appropriate action.
 * For example, if the base type given was 'CLONEVIZ' the result would be:
 *      {
 *          request: func which returns CLONEVIZ.REQUEST action
 *          success: func which returns CLONEVIZ.SUCCESS action
 *          failure: func which returns CLONEVIZ.FAILURE action
 *      }
 * @param  {object} baseType - the base api action (eg, THING_INSERT, or MY_ACTION)
 * @return {object} an object which holds functions returning standard redux actions
 */
export function createRequestSuccessAndFailureActions(baseType) {
	const types = {
		request: `${baseType}.REQUEST`,
		success: `${baseType}.SUCCESS`,
		failure: `${baseType}.FAILURE`,
	};
	const actions = {
		request: (payload, meta = {}) => createAction(types.request, { request: payload }, meta),
		success: (request, response, meta = {}) => createAction(types.success, { request, response }, meta),
		failure: (request, error, meta = {}) => createAction(types.failure, { request, error }, meta),
	};
	actions.request.type = types.request;
	actions.success.type = types.success;
	actions.failure.type = types.failure;

	return actions;
}

/**
 * @typedef {function} requestAction
 * A function that will generate the definition of a redux action representing a request
 * @param {object} payload
 * @param {object} meta
 * @returns {action}
 * @property {string} type The type of the redux action that that will be generated by this function
 * @public
 */

/**
 * @typedef {function} successAction
 * A function that will generate the definition of a redux action representing success
 * @param {object} request
 * @param {object} response
 * @param {object} meta
 * @returns {action}
 * @property {string} type The type of the redux action that that will be generated by this function
 * @public
 */


/**
 * @typedef {function} failureAction
 * A function that will generate the definition of a redux action representing failure
 * @param {object} request
 * @param {object} error
 * @param {object} meta
 * @returns {action}
 * @property {string} type The type of the redux action that that will be generated by this function
 * @public
 */

/**
 * @typedef {Object} SagaActionsGeneratorSet
 * A collection of actions that are used to run a saga
 * @public
 * @property {requestAction} request The action generator for `${type}_REQUEST`
 * @property {successAction} success The action generator for `${type}_SUCCESS`
 * @property {failureAction} failure The action generator for `${type}_FAILURE`
 */

/**
 * Creates a series of function that will generate the actions that will be taken or dispatched as part of a Saga.
 * @param {string} type The name of your Saga action
 * @returns {SagaActionsGeneratorSet} The set of action generators
 */
export function createSagaActions(type) {
	const actions = createRequestSuccessAndFailureActions(`SAGA_${type}`);

	registerIgnorableActions([actions.request.type, actions.success.type, actions.failure.type]);

	return actions;
}

/**
 * @typedef {function} storeActionGenerator
 * A function that will generate the definition of a redux action for dispatch direct to the store
 * @param {object} payload
 * @param {object} meta
 * @returns {Action}
 * @property {string} type The type of the redux action that that will be generating by this function
 * @public
 */

/**
 * Create a function that will generate an action that dispatches direct to the store.
 * @param {string} type The name of your store action
 * @returns {storeActionGenerator} The store action generator
 */
export function createStoreAction(type) {
	const storeType = `STORE_${type}`;

	const action = (payload, meta = {}) => createAction(storeType, payload, meta);
	action.type = storeType;

	return action;
}
